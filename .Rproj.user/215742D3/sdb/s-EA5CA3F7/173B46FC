{
    "collab_server" : "",
    "contents" : "dingo <- function(dat,x,rhoarray=NULL,diff.score=T,B=100,verbose=T,cores=1) {\n#  Input:\n####  - dat : n by p response data\n####  - x : length n covariate vector\n####  - rhoarray : Candidate tuning parameters of glasso for fitting global network. If it is one value, then we use the value. If it is null, we set the candidates.\n####  - diff.score : if TRUE, edge-wise differential scores are calculated from bootstrap standard error. \n####  - B : the number of bootstrap samples. It is used if diff.score is TRUE\n####  - verbose : if TRUE, the number of bootstrap samples are listed\n####  - cores : the number of cores to use for parallel bootstrapping\n    timer <- vector(mode = \"numeric\", length = 3)\n    ptm <- proc.time()[3]\n    \n    # Check that we are not specifying more cores than available. Reset if needed.\n    cores.avail <- detectCores() - 1\n    if (cores >= 2 & cores > cores.avail) {\n      cat(\"Cores specified (\", cores, \") is greater than recommended for your system (\", cores.avail, \"). Setting cores = \", cores.avail, \". \\n\", sep = \"\")\n      cores <- cores.avail\n    }\n  \n    n = nrow(dat)\n    p = ncol(dat)\n    II = diag(p)\n    w.upper = which(upper.tri(II))\n    w.mat = which(upper.tri(II), arr.ind = T)\n    \n    # data standardization\n    mdat = apply(dat,2,mean)\n    sdat = apply(dat,2,sd)\n    stddat = t((t(dat) - mdat)/sdat)\n    \n    ###################################\n    # fit global network using glasso #\n    ###################################\n\n    S = cov(stddat)\n    if (is.null(rhoarray)) {\n      if (n>p) {rhoarray = exp(seq(log(0.001),log(1),length=100))\n      }else {rhoarray = exp(seq(log(0.1),log(3),length=100))}\n    }\n    BIC = rep(0,length(rhoarray))\n    for (rh in 1:length(rhoarray)) {\n      fit.gl1 = glasso(S,rho=rhoarray[rh])\n      fit.gl2 = glasso(S,rho=rhoarray[rh],w.init=fit.gl1$w,wi.init=fit.gl1$wi)\n      BIC[rh] = extendedBIC(gamma=0,omegahat=fit.gl2$wi,S=S,n=nrow(dat))\n    }\n   rho = rhoarray[which.min(BIC)]\n   fit.gl1 = glasso(S,rho=rho)\n   fit.gl2 = glasso(S,rho=rho,w.init=fit.gl1$w,wi.init=fit.gl1$wi)\n\n   Omega = fit.gl2$wi\n   diag.Omega = diag(Omega)\n   P = -Omega/diag.Omega\n   diag(P) = 0\n\n   if (verbose) cat(\"Step 1 of DINGO is finished at\",date(),\"\\n\")\n   timer[1] <- proc.time()[3] - ptm\n\n   ######################################\n   # fit local group-specific component #\n   ######################################\n   tY.org = stddat %*% (II-t(P))\n   mdat = apply(tY.org,2,mean)\n   sdat = apply(tY.org,2,sd)\n   std.tY = t((t(tY.org) - mdat)/sdat)\n   fit.g = Greg.em(std.tY~x)\n   \n   if (verbose) cat(\"Step 2 of DINGO is finished at\",date(),\"\\n\")\n   timer[2] <- proc.time()[3] - timer[1] - ptm\n   \n   if (diff.score) {\n     if (verbose) cat(\"Bootstrap scoring is started at\", date(),\"\\n\")\n     if (cores >= 2) {\n       boot.fit = scoring.boot.parallel(stddat=stddat,z=x,Omega=Omega,A=fit.g$A,B=fit.g$B,boot.B=B,verbose=verbose,cores=cores)\n     } else {\n       boot.fit = scoring.boot(stddat=stddat,z=x,Omega=Omega,A=fit.g$A,B=fit.g$B,boot.B=B,verbose=verbose)\n     }\n     if (verbose) cat(\"Bootstrap scoring is done at\", date(),\"\\n\")\n     timer[3] <- proc.time()[3] - timer[2] - ptm\n     \n     return(list(genepair = boot.fit$genepair,levels.x = boot.fit$levels.z,R1=boot.fit$R1,R2=boot.fit$R2,boot.diff=boot.fit$boot.diff,diff.score=boot.fit$diff.score,rho=rho,P=P,Q=fit.g$B,Psi=fit.g$A,step.times=timer))\n   }else{\n     genepair = data.frame(gene1 = colnames(dat)[w.mat[, 1]], \n        gene2 = colnames(stddat)[w.mat[, 2]])\n     levels.x = unique(x)\n     R1 = -scaledMat(solve(Sigmax(Q = fit.g$B, P = P, Psi = fit.g$A, x = c(1,\n        levels.x[1]))))[w.upper]\n     R2 = -scaledMat(solve(Sigmax(Q = fit.g$B, P = P, Psi = fit.g$A, x = c(1, \n        levels.x[2]))))[w.upper]\n     return(list(genepair = genepair,levels.x = levels.x,R1=R1,R2=R2,boot.diff=NULL,diff.score=NULL,rho=rho,P=P,Q=fit.g$B,Psi=fit.g$A,step.times=timer))\n   }\n}\n\n",
    "created" : 1483565103346.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3379400710",
    "id" : "173B46FC",
    "lastKnownWriteTime" : 1487783615,
    "last_content_update" : 1487783615251,
    "path" : "Y:/R/win-library/3.1/DINGOparallel/R/dingo.R",
    "project_path" : "R/dingo.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}