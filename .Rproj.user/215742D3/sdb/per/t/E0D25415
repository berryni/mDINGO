{
    "collab_server" : "",
    "contents" : "scoring.boot <- function(stddat,z,Omega,A,B,boot.B=100,verbose=T) {\n    ## stddat <- standardized nxp data with colnames as genename\n    ## z <- covariate indicator (should be binary)\n    ## Omega <- precision matrix for whole data (implies global network)\n    ## A <- MLE of the baseline covariance matrix\n    ## B <- MLE of the regression coefficients\n    ## boot.B <- number of bootstrap samples   \n    \n    p = ncol(stddat)\n    n = nrow(stddat)\n    w.upper = which(upper.tri(Omega))\n    w.mat = which(upper.tri(Omega),arr.ind=T)\n    II = diag(p)\n    levels.z = unique(z)\n    \n    stopifnot(length(levels.z)==2)\n    \n    # make global component from Omega\n    diag.Omega = diag(Omega)\n    P = -Omega/diag.Omega\n    diag(P) = 0\n    \n    # data transformation\n    tY.org = stddat %*% (II-t(P))\n    \n    b = 1\n    boot.diff = matrix(nrow=length(w.upper),ncol=boot.B)\n    while(b<=boot.B) {\n      w.id = sample(1:n,replace=T)\n      tY = tY.org[w.id,]\n      mdat = apply(tY,2,mean)\n      sdat = apply(tY,2,sd)\n      std.tY = t((t(tY) - mdat)/sdat)\n      \n      fit.g = Greg.em(std.tY~z[w.id]) ## Fitting\n      \n      smat = diag(sdat)\n      sigmaX1 = smat%*%Sigmax(Q=fit.g$B,P=P,Psi=fit.g$A,x=c(1,levels.z[1]))%*%smat\n      omegaX1 = solve(sigmaX1)\n      boot.RX1 = trans.Fisher(-scaledMat(omegaX1)[w.upper])\n      \n      sigmaX2 = smat%*%Sigmax(Q=fit.g$B,P=P,Psi=fit.g$A,x=c(1,levels.z[2]))%*%smat\n      omegaX2 = solve(sigmaX2)\n      boot.RX2= trans.Fisher(-scaledMat(omegaX2)[w.upper])\n\n      boot.diff[,b] = trans.Fisher(-scaledMat(omegaX1)[w.upper]) - trans.Fisher(-scaledMat(omegaX2)[w.upper])\n      if (verbose & b%%10 ==0) {cat(b,\" bootstraps are done\",\"\\n\")}\n      b = b+1\n    }\n\n    # differential scoring\n    genepair = data.frame(gene1 = colnames(stddat)[w.mat[,1]],gene2 =colnames(stddat)[w.mat[,2]])\n    R1 = -scaledMat(solve(Sigmax(Q=B,P=P,Psi=A,x=c(1,levels.z[1]))))[w.upper]\n    R2 = -scaledMat(solve(Sigmax(Q=B,P=P,Psi=A,x=c(1,levels.z[2]))))[w.upper]\n    \n    diff.score = (trans.Fisher(R1) - trans.Fisher(R2)) / apply(boot.diff,1,sd)\n\n    return(list(genepair=genepair,levels.z=levels.z,R1=R1, R2=R2, boot.diff=boot.diff,diff.score=diff.score))\n}\n",
    "created" : 1487791090479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1340645787",
    "id" : "E0D25415",
    "lastKnownWriteTime" : 1435860310,
    "last_content_update" : 1435860310,
    "path" : "Y:/R/win-library/3.1/DINGOparallel/R/scoring.boot.R",
    "project_path" : "R/scoring.boot.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}